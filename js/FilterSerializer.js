// Generated by CoffeeScript 1.6.3
define(['core/FindObjectsFilterSerializer', 'filters/ContainsFilter', 'filters/EqualsFilter', 'filters/NotEqualFilter', 'filters/GreaterThanFilter'], function(FindObjectsFilterSerializer, ContainsFilter, EqualsFilter, NotEqualFilter, GreaterThanFilter) {
  var FilterSerializer;
  return FilterSerializer = (function() {
    function FilterSerializer() {}

    FilterSerializer.QUICKSEARCH = 'qUiCkSeArCh';

    FilterSerializer.RESOURCEAGENTSTATE = 'resourceAgentState';

    FilterSerializer.RESOURCEDISABLED = 'resourceDisabled';

    FilterSerializer.POOLS = 'pools';

    FilterSerializer.STEPLIMIT = 'stepLimit';

    FilterSerializer.PROXYHOSTNAME = 'proxyHostName';

    FilterSerializer.HOSTNAME = 'hostName';

    FilterSerializer.serialize = function(filters) {
      var down, filterCollection, hostFilter, isEnabledFilter, pa, poolsFilter, proxyFilter, serialized, stepLimitFilter, up;
      filterCollection = new Array();
      if (filters['search'] != null) {
        filterCollection.push(new EqualsFilter(this.QUICKSEARCH, filters['search']));
      }
      down = filters['status-down'];
      up = filters['status-up'];
      if (down && !up) {
        filterCollection.push(new EqualsFilter(this.RESOURCEAGENTSTATE, 'down'));
      }
      if (up && !down) {
        filterCollection.push(new EqualsFilter(this.RESOURCEAGENTSTATE, 'alive'));
      }
      if (filters['status'] === 'enabled') {
        isEnabledFilter = new EqualsFilter(this.RESOURCEDISABLED, filters['status']);
        filterCollection.push(isEnabledFilter);
      }
      if (filters['pools'] != null) {
        poolsFilter = new ContainsFilter(this.POOLS, filters['pools']);
        filterCollection.push(poolsFilter);
      }
      if (filters['hosts'] != null) {
        hostFilter = new EqualsFilter(this.HOSTNAME, filters['hosts']);
        filterCollection.push(hostFilter);
      }
      if (filters['step-limit'] != null) {
        stepLimitFilter = new GreaterThanFilter(this.STEPLIMIT, filters['step-limit']);
        filterCollection.push(stepLimitFilter);
      }
      pa = filters['proxy-agent'];
      if (pa !== 'no' && pa !== 0 && pa !== false) {
        if (pa === 'true' || pa === 'yes' || pa === 1) {
          proxyFilter = new NotEqualFilter(this.PROXYHOSTNAME, '');
        } else {
          proxyFilter = new EqualsFilter(this.PROXYHOSTNAME, '');
        }
        filterCollection.push(proxyFilter);
      }
      return serialized = FindObjectsFilterSerializer.serialize(filterCollection);
    };

    FilterSerializer.deserialize = function(serialized) {
      var d, decoded, deserialized, propertyName, sl, _i, _len;
      decoded = {
        'search': '',
        'status-down': false,
        'status-up': false,
        'status': '',
        'pools': '',
        'hosts': '',
        'step-limit': 0,
        'proxy-agent': 0
      };
      deserialized = new Array();
      FindObjectsFilterSerializer.deserialize(serialized, deserialized);
      for (_i = 0, _len = deserialized.length; _i < _len; _i++) {
        d = deserialized[_i];
        propertyName = d.getStringParameter('propertyName');
        switch (propertyName) {
          case this.QUICKSEARCH:
            decoded['search'] = d.getStringParameter('operand1');
            break;
          case this.RESOURCEAGENTSTATE:
            if ((d.getStringParameter('operand1')) === 'down') {
              decoded['status-down'] = true;
              decoded['status-up'] = false;
            } else if ((d.getStringParameter('operand1')) === 'alive') {
              decoded['status-down'] = false;
              decoded['status-up'] = true;
            }
            break;
          case this.RESOURCEDISABLED:
            decoded['status'] = d.getStringParameter('operand1');
            break;
          case this.POOLS:
            decoded['pools'] = d.getStringParameter('operand1');
            break;
          case this.STEPLIMIT:
            sl = d.getStringParameter('operand1');
            decoded['step-limit'] = parseInt(sl);
            break;
          case this.PROXYHOSTNAME:
            if ((d.getStringParameter('operator')) === 'notEqual') {
              decoded['proxy-agent'] = 1;
            }
            break;
          case this.HOSTNAME:
            decoded['hosts'] = d.getStringParameter('operand1');
            break;
        }
      }
      return decoded;
    };

    return FilterSerializer;

  })();
});

/*
//@ sourceMappingURL=FilterSerializer.map
*/
