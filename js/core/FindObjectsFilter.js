// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

define(['underscore', 'core/CommanderRequestFragment'], function(_, CommanderRequestFragment) {
  var FindObjectFilter;
  return FindObjectFilter = (function(_super) {
    __extends(FindObjectFilter, _super);

    /*
    @Operator: [
      'and'
      'between'
      'contains'
      'equals'
      'greaterOrEqual'
      'greaterThan'
      'in'
      'isNotNull'
      'isNull'
      'lessOrEqual'
      'lessThan'
      'like'
      'not'
      'notEqual'
      'notLike'
      'or'
    ]
    */


    function FindObjectFilter() {
      FindObjectFilter.__super__.constructor.apply(this, arguments);
    }

    FindObjectFilter.prototype.addFilter = function() {
      var f, filters, _i, _len;
      filters = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = filters.length; _i < _len; _i++) {
        f = filters[_i];
        this.addParameter('filter', f);
      }
      return this;
    };

    FindObjectFilter.prototype.nullToEmpty = function(str) {
      if (str == null) {
        console.log('nullToEmpty');
        return '';
      }
      return str;
    };

    FindObjectFilter.prototype.setOperand1 = function(operand1) {
      this.setParameter('operand1', this.nullToEmpty(operand1));
      return this;
    };

    FindObjectFilter.prototype.setOperand2 = function(operand2) {
      this.setParameter('operand2', this.nullToEmpty(operand2));
      return this;
    };

    FindObjectFilter.prototype.setOperator = function(operator) {
      return this.setParameter('operator', operator);
    };

    FindObjectFilter.prototype.setPropertyName = function(propertyName) {
      this.setParameter('propertyName', propertyName);
      return this;
    };

    FindObjectFilter.prototype.setDateOperand1 = function(operand1) {
      this.setParameter('displayOperand1', this.nullToEmpty(operand1));
      return this;
    };

    FindObjectFilter.prototype.setDateOperand2 = function(operand2) {
      this.setParameter('displayOperand2', this.nullToEmpty(operand2));
      return this;
    };

    /*
    class AndFilter extends FindObjectFilter
      constructor: (filters...) ->
        super
        @setOperator 'and'
        @addFilter filters
    
    class BetweenFilter extends FindObjectFilter
      constructor: (propertyName, operand1, operand2) ->
        super
        @setOperator 'between'
        @setPropertyName propertyName
        @setOperand1 operand1
        @setOperand2 operand2
    
    class ContainsFilter extends FindObjectFilter
      constructor: (propertyName, operand) ->
        super
        @setOperator 'contains'
        @setPropertyName propertyName
        @setOperand1 operand
    
    class EqualsFilter extends FindObjectFilter
      constructor: (propertyName, operand) ->
        super
        @setOperator 'equals'
        @setPropertyName propertyName
        @setOperand1 operand
    
    class GreaterOrEqualFilter extends FindObjectFilter
      constructor: (propertyName, operand) ->
        super
        @setOperator 'greaterOrEqual'
        @setPropertyName propertyName
        @setOperand1 operand
    
    class GreaterThanFilter extends FindObjectFilter
      constructor: (propertyName, operand) ->
        super
        @setOperator 'greaterThan'
        @setPropertyName propertyName
        @setOperand1 operand
    
    class InFilter extends FindObjectFilter
      constructor: (propertyName, operand) ->
        super
        @setOperator 'in'
        @setPropertyName propertyName
        @setOperand1 operand
    
    class IsNotNullFilter extends FindObjectFilter
      constructor: (propertyName) ->
        super
        @setOperator 'isNotNull'
        @setPropertyName propertyName
    
    
    
    class LessOrEqualFilter extends FindObjectFilter
      constructor: (propertyName, operand) ->
        super
        @setOperator 'lessOrEqual'
        @setPropertyName propertyName
        @setOperand1 operand
    
    class LessThanFilter extends FindObjectFilter
      constructor: (propertyName, operand) ->
        super
        @setOperator 'lessThan'
        @setPropertyName propertyName
        @setOperand1 operand
    
    class LikeFilter extends FindObjectFilter
      constructor: (propertyName, operand) ->
        super
        @setOperator 'like'
        @setPropertyName propertyName
        @setOperand1 operand
    
    class NotEqualFilter extends FindObjectFilter
      constructor: (propertyName, operand) ->
        super
        @setOperator 'notEqual'
        @setPropertyName propertyName
        @setOperand1 operand
    
    class NotFilter extends FindObjectFilter
      constructor: (filter) ->
        super
        @setOperator 'not'
        @addFilter filter
    
    class NotLikeFilter extends FindObjectFilter
      constructor: (propertyName, operand) ->
        super
        @setOperator 'notLike'
        @setPropertyName propertyName
        @setOperand1 operand
    
    class OrFilter extends FindObjectFilter
      constructor: (filter) ->
        super
        @setOperator 'or'
        @addFilter filter
    
    class IsNullFilter extends FindObjectFilter
      constructor: (propertyName) ->
        super
        @setOperator 'isNull'
        @setPropertyName propertyName
    */


    return FindObjectFilter;

  })(CommanderRequestFragment);
});

/*
//@ sourceMappingURL=FindObjectsFilter.map
*/
