// Generated by CoffeeScript 1.6.3
define(['core/FindObjectsFilterSerializer', 'filters/IsNullFilter', 'filters/IsNotNullFilter', 'filters/ContainsFilter', 'filters/EqualsFilter', 'filters/NotEqualFilter', 'filters/GreaterOrEqualFilter', 'filters/GreaterThanFilter', 'filters/LessOrEqualFilter', 'filters/LessThanFilter', 'filters/LikeFilter', 'filters/NotLikeFilter', 'filters/InFilter', 'filters/BetweenFilter', 'filters/AndFilter', 'filters/OrFilter', 'filters/NotFilter', 'FilterSerializer'], function(FindObjectFilterSerializer, IsNullFilter, IsNotNullFilter, ContainsFilter, EqualsFilter, NotEqualFilter, GreaterOrEqualFilter, GreaterThanFilter, LessOrEqualFilter, LessThanFilter, LikeFilter, NotLikeFilter, InFilter, BetweenFilter, AndFilter, OrFilter, NotFilter, FilterSerializer) {
  var App;
  return App = (function() {
    function App() {}

    App.prototype.FOO = 'foo';

    App.prototype.BAR = 'bar';

    App.prototype.BAZ = 'baz';

    App.prototype.ESCAPEE = 'a.b-c*d_e';

    App.prototype.filters = {
      'search': 'test search',
      'status-down': true,
      'status-up': false,
      'status': 'enabled',
      'pools': 'pools names',
      'hosts': 'hosts names',
      'step-limit': 10,
      'proxy-agent': 'no'
    };

    App.prototype.start = function() {
      var decoded, serialized;
      serialized = FilterSerializer.serialize(this.filters);
      console.log(serialized);
      decoded = this.deserialize(serialized);
      console.log(decoded);
      decoded = FilterSerializer.deserialize(serialized);
      return console.log(decoded);
      /*
      console.log '----------encoding----------'
      simple = new IsNullFilter @FOO
      encoded = @serialize simple
      console.log encoded # 'iN*foo'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'isNull'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      
      console.log '----------encoding----------'
      simple = new IsNotNullFilter @FOO
      console.log simple
      encoded = @serialize simple
      console.log encoded # 'nN*foo'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'isNotNull'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      
      # 1 operand
      console.log '----------encoding----------'
      simple = new ContainsFilter @FOO, @BAR
      console.log simple
      encoded = @serialize simple
      console.log encoded # 'ct*foo*bar'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'contains'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      console.log decoded[0].getStringParameter 'operand1' # 'BAR'
      
      console.log '----------encoding----------'
      simple = new EqualsFilter @FOO, @BAR
      console.log simple
      encoded = @serialize simple
      console.log encoded # 'eq*foo*bar'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'equals'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      console.log decoded[0].getStringParameter 'operand1' # 'BAR'
      
      console.log '----------encoding----------'
      simple = new NotEqualFilter @FOO, @BAR
      console.log simple
      encoded = @serialize simple
      console.log encoded # 'ne*foo*bar'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'notEqual'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      console.log decoded[0].getStringParameter 'operand1' # 'BAR'
      
      console.log '----------encoding----------'
      simple = new GreaterOrEqualFilter @FOO, @BAR
      console.log simple
      encoded = @serialize simple
      console.log encoded # 'ge*foo*bar'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'greaterOrEqual'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      console.log decoded[0].getStringParameter 'operand1' # 'BAR'
      
      console.log '----------encoding----------'
      simple = new GreaterThanFilter @FOO, @BAR
      console.log simple
      encoded = @serialize simple
      console.log encoded # 'gt*foo*bar'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'greaterThan'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      console.log decoded[0].getStringParameter 'operand1' # 'BAR'
      
      console.log '----------encoding----------'
      simple = new LessOrEqualFilter @FOO, @BAR
      console.log simple
      encoded = @serialize simple
      console.log encoded # 'le*foo*bar'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'lessOrEqual'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      console.log decoded[0].getStringParameter 'operand1' # 'BAR'
      
      console.log '----------encoding----------'
      simple = new LessThanFilter @FOO, @BAR
      console.log simple
      encoded = @serialize simple
      console.log encoded # 'lt*foo*bar'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'lessThan'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      console.log decoded[0].getStringParameter 'operand1' # 'BAR'
      
      console.log '----------encoding----------'
      simple = new LikeFilter @FOO, @BAR
      console.log simple
      encoded = @serialize simple
      console.log encoded # 'lk*foo*bar'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'like'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      console.log decoded[0].getStringParameter 'operand1' # 'BAR'
      
      console.log '----------encoding----------'
      simple = new NotLikeFilter @FOO, @BAR
      console.log simple
      encoded = @serialize simple
      console.log encoded # 'nl*foo*bar'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'notLike'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      console.log decoded[0].getStringParameter 'operand1' # 'BAR'
      
      values = new Array()
      values.push @FOO
      values.push @BAR
      values.push @BAZ
      
      console.log '----------encoding----------'
      simple = new InFilter @FOO, values
      console.log simple
      encoded = @serialize simple
      console.log encoded # 'in*foo*foo,bar,baz'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'in'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      console.log decoded[0].getStringParameter 'operand1' # 'foo,bar,baz'
      
      # 2 operands
      console.log '----------encoding----------'
      simple2 = new BetweenFilter @FOO, @BAR, @BAZ
      encoded = @serialize simple2
      console.log encoded # 'bt*foo*bar*baz'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'between'
      console.log decoded[0].getStringParameter 'propertyName' # 'FOO'
      console.log decoded[0].getStringParameter 'operand1' # 'BAR'
      console.log decoded[0].getStringParameter 'operand2' # 'BAZ'
      
      # Boolean filters
      console.log '----------encoding----------'
      complex = new AndFilter()
      complex.addFilter simple, simple2
      console.log complex
      encoded = @serialize complex
      console.log encoded # 'an_in*foo*foo,bar,baz-bt*foo*bar*baz_'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'and'
      
      console.log '----------encoding----------'
      complex = new OrFilter()
      complex.addFilter simple, simple2
      console.log complex
      encoded = @serialize complex
      console.log encoded # 'or_in*foo*foo,bar,baz-bt*foo*bar*baz_'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'or'
      
      console.log '----------encoding----------'
      complex = new NotFilter simple2
      console.log complex
      encoded = @serialize complex
      console.log encoded # 'nt_bt*foo*bar*baz_'
      
      console.log '---------decoding----------'
      decoded = @deserialize encoded
      console.log '----------result----------'
      console.log decoded.length # 1
      console.log @getOperator decoded[0] # 'not'
      
      @test_escaping()
      @test_intrinsics()
      @test_multiple_filters()
      @test_nested_filters()
      @test_weird_cases()
      */

    };

    App.prototype.test_escaping = function() {
      var and_, children, decoded, encoded;
      console.log('----------test escaping----------');
      and_ = new AndFilter(new BetweenFilter(this.ESCAPEE, this.ESCAPEE, this.ESCAPEE), new BetweenFilter(this.ESCAPEE, this.ESCAPEE, this.ESCAPEE));
      console.log(and_);
      encoded = this.serialize(and_);
      console.log(encoded);
      console.log('---------decoding----------');
      decoded = this.deserialize(encoded);
      console.log('----------result----------');
      console.log(this.getOperator(decoded[0]));
      children = this.getFilters(decoded[0]);
      console.log(children.length);
      console.log(children[0].getStringParameter('propertyName'));
      console.log(children[0].getStringParameter('operand1'));
      console.log(children[0].getStringParameter('operand2'));
      console.log(children[1].getStringParameter('propertyName'));
      console.log(children[1].getStringParameter('operand1'));
      return console.log(children[1].getStringParameter('operand2'));
    };

    App.prototype.test_intrinsics = function() {
      var decoded, encoded, filter, key, value, _ref, _results;
      console.log('----------test intrinsics----------');
      _ref = FindObjectFilterSerializer.Intrinsic;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        console.log('----------encoding----------');
        console.log('Key: ' + key);
        filter = new IsNullFilter(key);
        encoded = this.serialize(filter);
        console.log('Encoded: ' + encoded);
        console.log('---------decoding----------');
        decoded = this.deserialize(encoded);
        console.log('----------result----------');
        console.log('Decoded operator: ' + this.getOperator(decoded[0]));
        _results.push(console.log('Decoded property: ' + decoded[0].getStringParameter('propertyName')));
      }
      return _results;
    };

    App.prototype.test_multiple_filters = function() {
      var decoded, encoded, filters, impossible1, impossible2;
      impossible1 = new AndFilter(new LessThanFilter(this.FOO, '0'), new GreaterThanFilter(this.FOO, '0'));
      console.log(impossible1);
      impossible2 = new AndFilter(new IsNullFilter(this.FOO), new IsNotNullFilter(this.FOO));
      console.log(impossible2);
      filters = new Array();
      filters.push(impossible1);
      filters.push(impossible2);
      encoded = FindObjectFilterSerializer.serialize(filters);
      console.log(encoded);
      console.log('---------decoding----------');
      decoded = this.deserialize(encoded);
      console.log('----------result----------');
      console.log(decoded.length);
      console.log(this.getOperator(decoded[0]));
      return console.log(this.getOperator(decoded[1]));
    };

    App.prototype.test_nested_filters = function() {
      var children, decoded, encoded, grandchildren, impossible1, impossible2, or_;
      console.log('----------test_nested_filters----------');
      impossible1 = new AndFilter(new LessThanFilter(this.FOO, '0'), new GreaterThanFilter(this.FOO, '0'));
      console.log(impossible1);
      impossible2 = new AndFilter(new IsNullFilter(this.FOO), new IsNotNullFilter(this.FOO));
      console.log(impossible2);
      or_ = new OrFilter(impossible1, impossible2);
      console.log(or_);
      encoded = this.serialize(or_);
      console.log(encoded);
      console.log('---------decoding----------');
      decoded = this.deserialize(encoded);
      console.log('----------result----------');
      console.log(this.getOperator(decoded[0]));
      console.log('----------children----------');
      children = this.getFilters(decoded[0]);
      console.log(this.getOperator(children[0]));
      console.log(this.getOperator(children[1]));
      console.log('----------grandchildren----------');
      grandchildren = this.getFilters(children[0]);
      console.log(this.getOperator(grandchildren[0]));
      console.log(this.getOperator(grandchildren[1]));
      grandchildren = this.getFilters(children[1]);
      console.log(this.getOperator(grandchildren[0]));
      return console.log(this.getOperator(grandchildren[1]));
    };

    App.prototype.test_weird_cases = function() {
      var and_, decoded, encoded;
      console.log('----------test_weird_cases----------');
      and_ = new AndFilter();
      encoded = this.serialize(and_);
      console.log(encoded);
      console.log('---------decoding----------');
      decoded = this.deserialize(encoded);
      console.log('----------result----------');
      console.log(decoded.length);
      console.log(this.getOperator(decoded[0]));
      return console.log(decoded[0].getMultiValuedParameter('filter'));
    };

    App.prototype.serialize = function(f) {
      var l;
      l = new Array();
      l.push(f);
      return FindObjectFilterSerializer.serialize(l);
    };

    App.prototype.deserialize = function(s) {
      var l;
      l = new Array();
      FindObjectFilterSerializer.deserialize(s, l);
      return l;
    };

    App.prototype.getOperator = function(f) {
      return f.getStringParameter('operator');
    };

    App.prototype.getFilters = function(f) {
      var filters;
      filters = f.getMultiValuedParameter('filter');
      return filters;
    };

    return App;

  })();
});

/*
//@ sourceMappingURL=app.map
*/
